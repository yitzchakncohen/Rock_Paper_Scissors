//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GameInputs"",
            ""id"": ""2b75fd33-a5c8-4878-a66d-d560ad9f51f7"",
            ""actions"": [
                {
                    ""name"": ""SingleTouch"",
                    ""type"": ""Value"",
                    ""id"": ""7c2ac2aa-20a9-4ce0-af7c-04faa936bcb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MultiTouch"",
                    ""type"": ""Value"",
                    ""id"": ""ebe3c9e4-c8cf-4f1c-844a-f5f0a3d03cd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""0baf2cf7-b945-4ac8-a2b5-b5ea1cc87415"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""f3faa4e2-bc6d-43d9-bb1e-7998e4876178"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""c186f7d6-dcc5-495f-8728-746ad9196394"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f7eb1f3b-df00-4da7-adc3-05835d70bea7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf737c76-4a1a-4709-a917-f3465334f5d8"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""607d5d55-c430-435f-ac44-8d05495f2559"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b885441-8ae9-45ae-b8d7-90af7af1ff76"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33e8463c-7622-41da-9aec-d52a8397d141"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d003047b-c6c0-4692-944c-df0f3428dc25"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1601672-3081-4e38-b7c0-a50d0f90403a"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MultiTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameInputs
        m_GameInputs = asset.FindActionMap("GameInputs", throwIfNotFound: true);
        m_GameInputs_SingleTouch = m_GameInputs.FindAction("SingleTouch", throwIfNotFound: true);
        m_GameInputs_MultiTouch = m_GameInputs.FindAction("MultiTouch", throwIfNotFound: true);
        m_GameInputs_TouchPosition = m_GameInputs.FindAction("TouchPosition", throwIfNotFound: true);
        m_GameInputs_SecondaryTouchPosition = m_GameInputs.FindAction("SecondaryTouchPosition", throwIfNotFound: true);
        m_GameInputs_Scroll = m_GameInputs.FindAction("Scroll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameInputs
    private readonly InputActionMap m_GameInputs;
    private List<IGameInputsActions> m_GameInputsActionsCallbackInterfaces = new List<IGameInputsActions>();
    private readonly InputAction m_GameInputs_SingleTouch;
    private readonly InputAction m_GameInputs_MultiTouch;
    private readonly InputAction m_GameInputs_TouchPosition;
    private readonly InputAction m_GameInputs_SecondaryTouchPosition;
    private readonly InputAction m_GameInputs_Scroll;
    public struct GameInputsActions
    {
        private @PlayerControls m_Wrapper;
        public GameInputsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SingleTouch => m_Wrapper.m_GameInputs_SingleTouch;
        public InputAction @MultiTouch => m_Wrapper.m_GameInputs_MultiTouch;
        public InputAction @TouchPosition => m_Wrapper.m_GameInputs_TouchPosition;
        public InputAction @SecondaryTouchPosition => m_Wrapper.m_GameInputs_SecondaryTouchPosition;
        public InputAction @Scroll => m_Wrapper.m_GameInputs_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_GameInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameInputsActions set) { return set.Get(); }
        public void AddCallbacks(IGameInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameInputsActionsCallbackInterfaces.Add(instance);
            @SingleTouch.started += instance.OnSingleTouch;
            @SingleTouch.performed += instance.OnSingleTouch;
            @SingleTouch.canceled += instance.OnSingleTouch;
            @MultiTouch.started += instance.OnMultiTouch;
            @MultiTouch.performed += instance.OnMultiTouch;
            @MultiTouch.canceled += instance.OnMultiTouch;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @SecondaryTouchPosition.started += instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.performed += instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.canceled += instance.OnSecondaryTouchPosition;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        private void UnregisterCallbacks(IGameInputsActions instance)
        {
            @SingleTouch.started -= instance.OnSingleTouch;
            @SingleTouch.performed -= instance.OnSingleTouch;
            @SingleTouch.canceled -= instance.OnSingleTouch;
            @MultiTouch.started -= instance.OnMultiTouch;
            @MultiTouch.performed -= instance.OnMultiTouch;
            @MultiTouch.canceled -= instance.OnMultiTouch;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @SecondaryTouchPosition.started -= instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.performed -= instance.OnSecondaryTouchPosition;
            @SecondaryTouchPosition.canceled -= instance.OnSecondaryTouchPosition;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        public void RemoveCallbacks(IGameInputsActions instance)
        {
            if (m_Wrapper.m_GameInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameInputsActions @GameInputs => new GameInputsActions(this);
    public interface IGameInputsActions
    {
        void OnSingleTouch(InputAction.CallbackContext context);
        void OnMultiTouch(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnSecondaryTouchPosition(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
    }
}
